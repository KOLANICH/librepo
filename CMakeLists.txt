PROJECT (librepo C)
CMAKE_MINIMUM_REQUIRED (VERSION 2.8.5)

OPTION (ENABLE_TESTS "Build test?" ON)
OPTION (ENABLE_DOCS "Build docs?" ON)
OPTION (WITH_ZCHUNK "Build with zchunk support" ON)

INCLUDE (${CMAKE_SOURCE_DIR}/VERSION.cmake)
SET (VERSION "${LIBREPO_MAJOR}.${LIBREPO_MINOR}.${LIBREPO_PATCH}")

SET (CMAKE_C_FLAGS          "${CMAKE_C_FLAGS} -std=c99 -Wall")
SET (CMAKE_C_FLAGS_DEBUG    "${CMAKE_C_FLAGS} -ggdb -O0 -Wall -Wextra -DDEBUG")

IF(CMAKE_BUILD_TYPE AND (CMAKE_BUILD_TYPE STREQUAL "DEBUG" OR CMAKE_BUILD_TYPE STREQUAL "debug"))
    MESSAGE("Build type is set do DEBUG!")
ENDIF()

# Set librepo log domain

add_definitions( -DG_LOG_DOMAIN="librepo" )

# Add path with own cmake modules

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR})
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

# Find necessare libraries

FIND_PACKAGE(PkgConfig)
PKG_CHECK_MODULES(GLIB2 glib-2.0 REQUIRED)
PKG_SEARCH_MODULE(LIBCRYPTO REQUIRED libcrypto openssl)
PKG_CHECK_MODULES(LIBXML2 libxml-2.0 REQUIRED)
FIND_PACKAGE(CURL REQUIRED)
FIND_PACKAGE(Gpgme REQUIRED)


IF (WITH_ZCHUNK)
PKG_CHECK_MODULES(ZCHUNKLIB zck>=0.9.11 REQUIRED)
SET (CMAKE_C_FLAGS          "${CMAKE_C_FLAGS} -DWITH_ZCHUNK")
SET (CMAKE_C_FLAGS_DEBUG    "${CMAKE_C_FLAGS_DEBUG} -DWITH_ZCHUNK")
ENDIF (WITH_ZCHUNK)

INCLUDE_DIRECTORIES(${GLIB2_INCLUDE_DIRS})

# Enable large file support

ADD_DEFINITIONS(-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE)

# Check libraries

IF (NOT LIBXML2_FOUND)
    MESSAGE(FATAL_ERROR "No libxml-2.0 library installed")
ENDIF (NOT LIBXML2_FOUND)

IF (NOT CURL_FOUND)
    MESSAGE(FATAL_ERROR "No CURL library installed")
ENDIF (NOT CURL_FOUND)


# Add include dirs

INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIR})
#INCLUDE_DIRECTORIES(${CHECK_INCLUDE_DIR})

include (GNUInstallDirs)
# Python stuff

IF (NOT PYTHON_DESIRED)
    FIND_PACKAGE (PythonInterp REQUIRED)
ELSEIF (${PYTHON_DESIRED} STREQUAL "2")
    FIND_PACKAGE (PythonInterp 2 EXACT REQUIRED)
ELSEIF (${PYTHON_DESIRED} STREQUAL "3")
    FIND_PACKAGE (PythonInterp 3 EXACT REQUIRED)
ELSEIF (EXISTS ${PYTHON_DESIRED})
    SET (PYTHON_EXECUTABLE ${PYTHON_DESIRED})
    FIND_PACKAGE (PythonInterp REQUIRED)
ELSE ()
    MESSAGE (FATAL_ERROR "Invalid PYTHON_DESIRED value: " ${PYTHON_DESIRED})
ENDIF()
FIND_PACKAGE (PythonLibs REQUIRED)


# Subdirs

ADD_SUBDIRECTORY (librepo)

IF (ENABLE_TESTS)
  FIND_LIBRARY(CHECK_LIBRARY NAMES check)
  ENABLE_TESTING()
  ADD_SUBDIRECTORY (tests)
ENDIF (ENABLE_TESTS)

IF (ENABLE_DOCS)
  ADD_SUBDIRECTORY (doc)
ENDIF (ENABLE_DOCS)


set(CPACK_PACKAGE_NAME librepo)
set(CPACK_PACKAGE_VERSION_MAJOR "${LIBREPO_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${LIBREPO_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${LIBREPO_PATCH}")

set(CPACK_PACKAGE_VENDOR "Red Hat")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Repodata downloading library")
set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/CPack.librepo.description.txt")
set(CPACK_PACKAGE_HOMEPAGE_URL "https://github.com/rpm-software-management/librepo")
set(CPACK_PACKAGE_CONTACT "https://github.com/rpm-software-management/librepo")
set(CPACK_PACKAGE_CHECKSUM "SHA512")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/COPYING")
set(CPACK_GENERATOR "DEB")

string(REPLACE "." ";" GLIB2_VERSION_PARSED "${GLIB2_VERSION}")
list(GET GLIB2_VERSION_PARSED 0 GLIB2_VERSION_MAJOR)
list(GET GLIB2_VERSION_PARSED 1 GLIB2_VERSION_MINOR)

string(REPLACE "." ";" GPGME_VERSION_PARSED "${GPGME_VERSION}")
list(GET GPGME_VERSION_PARSED 0 GPGME_VERSION_MAJOR)

string(REPLACE "." ";" LIBCRYPTO_VERSION_PARSED "${LIBCRYPTO_VERSION}")
list(GET LIBCRYPTO_VERSION_PARSED 0 LIBCRYPTO_VERSION_MAJOR)
list(GET LIBCRYPTO_VERSION_PARSED 1 LIBCRYPTO_VERSION_MINOR)


string(REPLACE "." ";" GLIB2_VERSION_PARSED "${GLIB2_VERSION}")

message(STATUS "GLIB2_VERSION ${GLIB2_VERSION}")
message(STATUS "LIBCRYPTO_VERSION ${LIBCRYPTO_VERSION}")
message(STATUS "LIBXML2_VERSION ${LIBXML2_VERSION}")
message(STATUS "CURL_VERSION_STRING ${CURL_VERSION_STRING}")
message(STATUS "GPGME_VERSION ${GPGME_VERSION}")
message(STATUS "ZCHUNKLIB_VERSION ${ZCHUNKLIB_VERSION}")


set(CPACK_DEBIAN_PACKAGE_DEPENDS "libglib${GLIB2_VERSION_MAJOR}.0-0 (>=${GLIB2_VERSION});libxml2 (>=${LIBXML2_VERSION});libcurl3-gnutls (>=${CURL_VERSION_STRING});libgpgme${GPGME_VERSION_MAJOR}1 (>=${GPGME_VERSION});libssl${LIBCRYPTO_VERSION_MAJOR}.${LIBCRYPTO_VERSION_MINOR} (>=${LIBCRYPTO_VERSION})")
if(WITH_ZCHUNK)
	list(APPEND CPACK_DEBIAN_PACKAGE_DEPENDS "libzchunk (>=${ZCHUNKLIB_VERSION})")
endif()
list(JOIN CPACK_DEBIAN_PACKAGE_DEPENDS ", " CPACK_DEBIAN_PACKAGE_DEPENDS)

include(CPack)